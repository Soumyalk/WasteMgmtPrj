package com.wastemgnt.web.utils;

import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.springframework.scheduling.annotation.Async;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.ui.Model;

import com.wastemgnt.service.entity.Permission;
import com.wastemgnt.service.entity.User;
import com.wastemgnt.service.entity.UserRole;

public class Utilities {

	public static String getLoggedInUserName(Model model) {
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		if (principal instanceof UserDetails) {
			return ((UserDetails) principal).getUsername();
		}
		return principal.toString();
	}

	public static boolean isUserHasPermission(User u, String permissionName) {
		for (UserRole role : u.getUserRoles()) {
			for (Permission permission : role.getPermissions()) {
				if (permission.getPermission().equals(permissionName)) {
					return true;
				}
			}
		}
		return false;
	}

	public static boolean isUserHasRole(User u, String roleName) {
		for (UserRole role : u.getUserRoles()) {
			if (role.getRoleName().equals(roleName)) {
				return true;
			}
		}
		return false;
	}

	public static List<String> getStatuses() {
		return Arrays.asList("NEW", "ORDER_ASSGINED", "ORDER_PICKED", "ORDER_DELIVERED", "ORDER_COMPLETED");
	}

	public static List<String> getEntityTypes() {
		return Arrays.asList("INDIVIDUAL", "ENTITY");
	}

	public static List<String> getGenderTypes() {
		return Arrays.asList("MALE", "FEMALE");
	}

	public static List<String> getDRStatuses() {
		return Arrays.asList("ORDER_PICKED", "ORDER_DELIVERED");
	}

	public static boolean isSystemAdmin(User user) {
		return user.getUserRoles().stream().anyMatch(userRole -> userRole.getRoleName().equals("SYSADMIN"));
	}

	//This method is used to send notifications for Users
	@Async
	public static void sendMail(final String fromEmail, final String toEmail, final String body, final String subject,
			final String password) {
		try {

			String smtpHostServer = "smtp.gmail.com";

			Properties props = System.getProperties();

			props.put("mail.smtp.host", smtpHostServer);
			props.put("mail.smtp.port", "587");
			props.put("mail.transport.protocol", "smtp");
			props.put("mail.smtp.auth", true);
			props.put("mail.smtp.starttls.enable", "true");
			props.put("mail.smtp.ssl.trust", "smtp.gmail.com");

			Session session = Session.getInstance(props, new javax.mail.Authenticator() {
				protected PasswordAuthentication getPasswordAuthentication() {
					return new PasswordAuthentication(fromEmail, password);
				}
			});

			MimeMessage msg = new MimeMessage(session);
			// set message headers
			msg.addHeader("Content-type", "text/HTML; charset=UTF-8");
			msg.addHeader("format", "flowed");
			msg.addHeader("Content-Transfer-Encoding", "8bit");

			msg.setFrom(new InternetAddress(fromEmail, subject));

			msg.setSubject("Test", "UTF-8");

			msg.setText(body, "UTF-8");

			msg.setSentDate(new Date());

			msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail, false));
			Transport.send(msg);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
